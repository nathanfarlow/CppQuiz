let questions = [{"code": "#include <iostream>\n\nclass MyClass {\n    int val_ = 1;\n};\n\nstruct MyStruct : MyClass {};\n\nint main() {\n    MyStruct m;\n    std::cout << m.val_ << std::endl;\n\n    return 0;\n}", "prompt": "Welcome to the C++ quiz! (Although some of the peculiarities have their origins in C) Let's start easy. What does the above code print? All of the C++ examples in this quiz will be compiled with g++ -std=c++17. (If undefined, select 'Undefined behavior'. If the code would not compile, select 'Compilation error')\n", "answers": [0, 1, -1, "Undefined behavior", "Compilation error"], "correct": 4, "explanation": "It is possible for C++ structs to inherit from C++ classes. In fact, the only difference between structs and classes is the fact that member variables are private by default in a class and public by default in a struct. Because val_ was private in MyClass, it will remain private in whatever class/struct inherits from it, leading to a compilation issue by trying to access it in main."}, {"code": "#include <iostream>\n\nstruct Object {\n    Object() {\n        std::cout << \"A \";\n    }\n\n    Object(const Object &o) {\n        std::cout << \"B \";\n    }\n\n    Object& operator=(const Object &o) {\n        std::cout << \"C \";\n        return *this;\n    }\n};\n\nint main() {\n    Object a, b = a;\n}", "prompt": "Let's review constructors and operators. What does the above code print?\n", "answers": ["A C", "A A C", "A B", "Undefined behavior", "Compilation error"], "correct": 2, "explanation": "When declaring and initializing an object in the same statement, the copy constructor is invoked, not the assignment operator. In other words, Object b = a is the same as Object b{a}."}];